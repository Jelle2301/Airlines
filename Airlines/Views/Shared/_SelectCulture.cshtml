@using Microsoft.AspNetCore.Localization
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Options
@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> locOptions

@{
    // Represents the feature that provides the current request's culture information. (zie cookie culture wordt uitgelezen als deze aanwwezig is anders http-header)
    //De middleware stelt de huidige cultuur en UI-cultuur in, die later in de applicatie beschikbaar zijn via IRequestCultureFeature.

    var currentRequestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = locOptions.Value.SupportedUICultures
        .Select(c => new SelectListItem { Value = c.Name, Text = c.DisplayName })
        .ToList();
    var responseUrl = string.IsNullOrEmpty(Context.Request.Path) ? "~/" :
        $"~{Context.Request.Path.Value}";
}

<div class="language-selector">
    <form id="selectLanguage" asp-controller="Home"
          asp-action="SetAppLanguage" asp-route-returnUrl="@responseUrl"
          method="post" role="form">
        <label for="lang">@Localizer["Select Language"]</label>
        <select id="lang" name="lang" class="setLang"
                asp-for="@currentRequestCulture.RequestCulture.UICulture.Name"
                asp-items="cultureItems"
                onchange="this.form.submit()">
        </select>
    </form>
</div>
